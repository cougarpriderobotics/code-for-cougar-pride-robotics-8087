// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

package frc.robot;

import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;

import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.PneumaticsModuleType;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
public class Robot extends TimedRobot {
  /**
   * This function is run when the robot is first started up and should be used for any
   * initialization code.
   */


  Joystick logitechController = new Joystick(1);

  //Drive Motors
  private final int m_rightFID = 1;
  private final int m_leftFID = 3;
  private final int m_rightBID =2;
  private final int m_leftBID = 4;
  private final CANSparkMax m_rightF = new CANSparkMax(m_rightFID, MotorType.kBrushed);
  private final CANSparkMax m_leftF = new CANSparkMax(m_leftFID, MotorType.kBrushed);
  private final CANSparkMax m_rightB = new CANSparkMax(m_rightBID, MotorType.kBrushed);
  private final CANSparkMax m_leftB = new CANSparkMax(m_leftBID, MotorType.kBrushed);
  private final DifferentialDrive drive = new DifferentialDrive(m_leftF, m_rightF);

  //Shooter
  private final int shooter_ID = 5;
  private final CANSparkMax shooter = new CANSparkMax(shooter_ID,MotorType.kBrushed); 

  //Ball Collector
  private final int ball_collector_ID = 6;
  private final CANSparkMax ball_collector = new CANSparkMax(ball_collector_ID, MotorType.kBrushed);

  //Xbox Controller
  private final XboxController driver = new XboxController(0);

  //Compressor
  private final Compressor comp = new Compressor( PneumaticsModuleType.REVPH);

  //Solenoid
  private final DoubleSolenoid solenoid = new DoubleSolenoid(0, PneumaticsModuleType.REVPH, 1, 2);



  @Override
  public void robotInit() {
    m_leftB.follow(m_leftF);
    m_rightB.follow(m_rightF);
    m_rightF.setInverted(true);
    m_rightB.setInverted(true);
    logitechController.getRawAxis(m_leftBID);
    logitechController.getRawAxis(m_rightBID); 
  }

  @Override
  public void robotPeriodic() {}

  @Override
  public void autonomousInit() {}

  @Override
  public void autonomousPeriodic() {
    shooter.set(1.0);
  }

  @Override
  public void teleopInit() {
  }

  @Override
  public void teleopPeriodic() {

    //Drive Code
    double multiplier = 1;
    drive.tankDrive(driver.getLeftY() * multiplier, driver.getRightY() * multiplier);
    
    //Shooter Code
    if (driver.getLeftBumper())
    {
      shooter.set(0.8);
    }
 
    else if (driver.getRightBumper())
    {
      shooter.set(-0.8);
    }
  
    else
    {
      shooter.stopMotor();
    }

    //Ball Collector Code
    if (driver.getAButton())
    {
      ball_collector.set(0.8);
    }
 
    else if (driver.getBButton())
    
    {
      ball_collector.set(-0.8);
    }

   
    solenoid.set(Value.kOff);
  
  }
  

 
  

  @Override
  public void disabledInit() {}

  @Override
  public void disabledPeriodic() {}

  @Override
  public void testInit() {}

  @Override
  public void testPeriodic() {}

  @Override
  public void simulationInit() {}

  @Override
  public void simulationPeriodic() {}
}
